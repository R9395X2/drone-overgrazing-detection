/**
 * ÂõæÂÉèÂ§ÑÁêÜÊúçÂä°
 * Â§ÑÁêÜPythonËÑöÊú¨Ë∞ÉÁî®ÂíåÂõæÂÉèÂ§ÑÁêÜ
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const configManager = require('../../config/ConfigManager');

/**
 * Ë∞ÉÁî®ÈÖçÁΩÆÁöÑPythonËÑöÊú¨Â§ÑÁêÜÂõæÁâá
 */
async function processImageWithScripts(imagePath, selectedScripts) {
    const enabledScripts = configManager.getEnabledScripts();
    const results = [];
    
    for (const script of enabledScripts) {
        if (selectedScripts && !selectedScripts.includes(script.id)) {
            continue; // Ë∑≥ËøáÊú™ÈÄâÊã©ÁöÑËÑöÊú¨
        }
        
        try {
            console.log(`üêç ÊâßË°åËÑöÊú¨: ${script.name}`);
            const result = await processPythonScript(script, imagePath);
            results.push({
                scriptId: script.id,
                scriptName: script.name,
                success: true,
                data: result
            });
        } catch (error) {
            console.error(`‚ùå ËÑöÊú¨ÊâßË°åÂ§±Ë¥• [${script.name}]:`, error);
            results.push({
                scriptId: script.id,
                scriptName: script.name,
                success: false,
                error: error.message
            });
        }
    }
    
    return results;
}

/**
 * Ë∞ÉÁî®PythonËÑöÊú¨Â§ÑÁêÜÂõæÁâáÔºàÁúüÂÆûÂÆûÁé∞Ôºâ
 */
function processPythonScript(scriptConfig, imagePath) {
    return new Promise((resolve, reject) => {
        const scriptPath = path.resolve(scriptConfig.path);
        
        if (!fs.existsSync(scriptPath)) {
            reject(new Error(`ËÑöÊú¨Êñá‰ª∂‰∏çÂ≠òÂú®: ${scriptPath}`));
            return;
        }
        
        // ÂáÜÂ§áËÑöÊú¨ÂèÇÊï∞ - ‰ΩøÁî®ËÑöÊú¨ÈÄÇÈÖçÂô®ÁöÑË∞ÉÁî®ÊñπÂºè
        let args = [];
        
        if (scriptConfig.options && scriptConfig.options.script_type) {
            // ‰ΩøÁî®ËÑöÊú¨ÈÄÇÈÖçÂô®
            args = [scriptPath, scriptConfig.options.script_type, imagePath];
            
            // Ê∑ªÂä†ÂÖ∂‰ªñÈÄâÈ°πÔºàÈô§‰∫Üscript_typeÔºâ
            const otherOptions = { ...scriptConfig.options };
            delete otherOptions.script_type;
            if (Object.keys(otherOptions).length > 0) {
                args.push(JSON.stringify(otherOptions));
            }
        } else {
            // ‰º†ÁªüÊñπÂºè
            args = [scriptPath, imagePath];
            if (scriptConfig.options) {
                args.push(JSON.stringify(scriptConfig.options));
            }
        }
        
        console.log(`ÊâßË°åÂëΩ‰ª§: python ${args.join(' ')}`);
        
        const pythonProcess = spawn('python', args);
        let output = '';
        let error = '';
        
        pythonProcess.stdout.on('data', (data) => {
            output += data.toString();
        });
        
        pythonProcess.stderr.on('data', (data) => {
            error += data.toString();
        });
        
        pythonProcess.on('close', (code) => {
            if (code === 0) {
                try {
                    // Â∞ùËØïËß£ÊûêJSONËæìÂá∫
                    const result = JSON.parse(output);
                    resolve(result);
                } catch (parseError) {
                    // Â¶ÇÊûú‰∏çÊòØJSONÔºåËøîÂõûÂéüÂßãËæìÂá∫
                    resolve({
                        type: 'text',
                        content: output.trim(),
                        raw: true
                    });
                }
            } else {
                reject(new Error(`PythonËÑöÊú¨ÊâßË°åÂ§±Ë¥• (ÈÄÄÂá∫Á†Å: ${code}): ${error}`));
            }
        });
        
        pythonProcess.on('error', (err) => {
            reject(new Error(`Êó†Ê≥ïÂêØÂä®PythonËøõÁ®ã: ${err.message}`));
        });
    });
}

/**
 * È™åËØÅÂõæÁâáÊñá‰ª∂ÊòØÂê¶Â≠òÂú®‰∏îÂèØËÆøÈóÆ
 */
function validateImageFile(imagePath) {
    if (!imagePath) {
        throw new Error('ÂõæÁâáË∑ØÂæÑ‰∏çËÉΩ‰∏∫Á©∫');
    }
    
    if (!fs.existsSync(imagePath)) {
        throw new Error('ÂõæÁâáÊñá‰ª∂‰∏çÂ≠òÂú®');
    }
    
    try {
        fs.accessSync(imagePath, fs.constants.R_OK);
    } catch (error) {
        throw new Error('Êó†Ê≥ïËØªÂèñÂõæÁâáÊñá‰ª∂');
    }
    
    return true;
}

/**
 * ÁîüÊàêÂ§ÑÁêÜÁªìÊûúÊëòË¶Å
 */
function generateProcessingSummary(scriptResults, processingTime) {
    const summary = {
        totalScripts: scriptResults.length,
        successfulScripts: scriptResults.filter(r => r.success).length,
        failedScripts: scriptResults.filter(r => !r.success).length,
        processingTime: processingTime,
        hasErrors: scriptResults.some(r => !r.success)
    };
    
    // ÊèêÂèñ‰∏ªË¶ÅÁªìÊûú
    const mainResults = {};
    scriptResults.forEach(result => {
        if (result.success && result.data) {
            // Ê£ÄÊµãÁæäÁæ§Êï∞ÈáèÁªìÊûú
            if (result.data.results && typeof result.data.results.sheep_count === 'number') {
                mainResults.sheepCount = result.data.results.sheep_count;
                mainResults.processedImage = result.data.results.processed_image;
                mainResults.resultsDirectory = result.data.results.results_directory;
            }
            
            // ÂÖ∂‰ªñÁ±ªÂûãÁöÑÁªìÊûú
            if (result.data.type) {
                mainResults[result.data.type] = result.data.content || result.data;
            }
        }
    });
    
    summary.mainResults = mainResults;
    return summary;
}

/**
 * Ê∏ÖÁêÜÂ§ÑÁêÜÁªìÊûúÊñá‰ª∂ÔºàÂèØÈÄâÔºâ
 */
function cleanupProcessingResults(resultPaths) {
    if (!Array.isArray(resultPaths)) {
        return;
    }
    
    resultPaths.forEach(filePath => {
        try {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
                console.log(`Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂: ${filePath}`);
            }
        } catch (error) {
            console.warn(`Ê∏ÖÁêÜÊñá‰ª∂Â§±Ë¥•: ${filePath}`, error.message);
        }
    });
}

module.exports = {
    processImageWithScripts,
    processPythonScript,
    validateImageFile,
    generateProcessingSummary,
    cleanupProcessingResults
};
